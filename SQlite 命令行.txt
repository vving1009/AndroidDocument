sqlite3 语句总结 

安装：
在 Windows 上安装 SQLite，http://www.sqlite.org/download.html
    您需要下载 sqlite-shell-win32-*.zip 和 sqlite-dll-win32-*.zip 压缩文件。
    创建文件夹 C:\sqlite，并在此文件夹下解压上面两个压缩文件，将得到 sqlite3.def、sqlite3.dll 和 sqlite3.exe 文件。
    添加 C:\sqlite 到 PATH 环境变量，最后在命令提示符下，使用 sqlite3 命令，将显示如下结果。
C:\>sqlite3
SQLite version 3.7.15.2 2013-01-09 11:53:05
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite> 

-------------------------------------------------------------------------------------------

sqlite3常用命令
提供一组内置的命令，它们是以点.开始

- 当前目录下建立或打开test.db数据库文件，并进入sqlite命令终端，以sqlite>前缀标识：
#sqlite3 test.db
 
- 查看数据库文件信息命令(注意命令前带字符'.')：
sqlite>.database

- 列出所有的数据表： 
sqlite>.tables

- 查看所有表的创建语句：
sqlite>.schema
 
- 查看指定表的创建语句：
sqlite>.schema table_name
 
- 以sql语句的形式列出表内容：
sqlite>.dump table_name
如果要将输出重定向到文件，请使用.dump[filename]命令，此命令将所有的输出重定向到指定的文件中。若要恢复到屏幕的输出，只需要执行.output stdout命令就OK了。
sqlite>.output file.sql　　
sqlite>.dump
sqlite>.output stdout

- 导入数据：.read     数据文件
打开记事本，并将下列 SQL 语句复制到记事本中，保存为 test.sql 到上面说到的 Db 目录下，在命令行环境中输入
.read   test.sql
即将所有的数据导入到 test.db 数据库中。
test.db 导入数据
BEGIN TRANSACTION;
CREATE TABLE Cars(Id integer PRIMARY KEY, Name text, Cost integer);
INSERT INTO Cars VALUES(1,'Audi',52642);
INSERT INTO Cars VALUES(2,'Mercedes',57127);
INSERT INTO Cars VALUES(3,'Skoda',9000);
INSERT INTO Cars VALUES(4,'Volvo',29000);
INSERT INTO Cars VALUES(5,'Bentley',350000);
INSERT INTO Cars VALUES(6,'Citroen',21000);
INSERT INTO Cars VALUES(7,'Hummer',41400);
INSERT INTO Cars VALUES(8,'Volkswagen',21600);
COMMIT; 
CREATE TABLE IF NOT EXISTS Reservations(Id integer PRIMARY KEY, CustomerId integer, Day text);
INSERT INTO Reservations(CustomerId, Day) VALUES(1, '2009-22-11');
INSERT INTO Reservations(CustomerId, Day) VALUES(2, '2009-28-11');
INSERT INTO Reservations(CustomerId, Day) VALUES(2, '2009-29-11');
INSERT INTO Reservations(CustomerId, Day) VALUES(1, '2009-29-11');
INSERT INTO Reservations(CustomerId, Day) VALUES(3, '2009-02-12');
COMMIT;

- 设置显示信息的分隔符：
sqlite>.separator symble
Example：设置显示信息以‘：’分隔（其他字符也可以）
sqlite>.separator :
 
- 设置显示模式：
sqlite>.mode mode_name
Example:默认为list，设置为column，其他模式可通过.help查看mode相关内容
sqlite>.mode column
 
- 显示标题栏：
sqlite>.headers   on
 
 
- 输出帮助信息：
sqlite>.help
 
- 设置每一列的显示宽度：
sqlite>.width w1,w2,w3.........
Example:设置宽度为2
sqlite>.width 2

- 设置 NULL 值显示成什么样子：
默认情况下NULL值什么也不显示，你可以设置成你自己想要的样子
sqlite>.nullvalue Empty或NULL或NaN等

- 列出当前显示格式的配置：
sqlite>.show
 
- 查看一个表的索引
sqlite>.indices Member　　　
 
- 退出sqlite终端命令：
sqlite>.quit
或
sqlite>.exit
 
- 备份数据库
　　有两种方式可以完成数据库的备份，具体使用哪一种取决于你希望的备份类型。SQL转储许是移植性最好的备份。
　　生成转储的标准方式是使用CLP.dump命令:sqlite3 test.db .dump >test.sql
　　　　在Shell中，可以将输出重定向到外部文件，执行命令，恢复到屏幕输出，如：　　
　　　　sqlite>.output file.sql
　　　　sqlite>.dump
　　　　sqlite>.output stdout
　　　　sqlite>.exit　　
　　同样，容易将SQL转储作为CLP的输入流实现数据库导入：
　　sqlite3 test.db <test.sql
　　备份二进制数据库知识比复制文件稍多做一点工作。备份之前需要清理数据库，这样可以释放一些已删除对象不再使用的空间。这数据库文件就会变小，因此二进制的副本也会较小：
　　sqlite3 test.db vacuum
　　cp test.db test.Backup
 
 
-------------------------------------------------------------------------------------------


2、sqlite3指令


sql的指令格式：所有sql指令都是以分号(;)结尾，两个减号(--)则表示注释。
对SQL语句大小写不敏感，所以大写小写随便
如：
sqlite>create studen_table(Stu_no interger PRIMARY KEY, Name text NOT NULL, Id integer UNIQUE, Age interger CHECK(Age>6), School text DEFAULT 'xx小学);
该语句创建一个记录学生信息的数据表。

- 约束：
    NOT NULL 约束：确保某列不能有 NULL 值。
    DEFAULT 约束：当某列没有指定值时，为该列提供默认值。
    UNIQUE 约束：确保某列中的所有值是不同的。
    PRIMARY Key 约束：唯一标识数据库表中的各行/记录。
    CHECK 约束：CHECK 约束确保某列中的所有值满足一定条件。

 
- sqlite3存储数据的类型
NULL：标识一个NULL值
INTERGER：整数类型
REAL：浮点数
TEXT：字符串, value需加上'' ('value')
BLOB：二进制数

3.2 sqlite3存储数据的约束条件
Sqlite常用约束条件如下：
PRIMARY KEY - 主键：
1）主键的值必须唯一，用于标识每一条记录，如学生的学号
2）主键同时也是一个索引，通过主键查找记录速度较快
3）主键如果是整数类型，该列的值可以自动增长
NOT NULL - 非空：
约束列记录不能为空，否则报错
UNIQUE - 唯一：
除主键外，约束其他列的数据的值唯一
CHECK - 条件检查：
约束该列的值必须符合条件才可存入
DEFAULT - 默认值：
列数据中的值基本都是一样的，这样的字段列可设为默认值

1）建立数据表
create table table_name(field1 type1, field2 type1, ...);
table_name是要创建数据表名称，fieldx是数据表内字段名称，typex则是字段类型。
例，建立一个简单的学生信息表，它包含学号与姓名等学生信息：
create table student_info(stu_no integer primary key, name text);
create table if not exists 表名(字段名1,字段名2...);   
除了INTEGER PRIMARY KEY其它字段是都可以是无类型的，也就是不关声明什么或者不声明，这个字段是可以存储任何数据的。

删除表：
drop table if exists table_name
清除表中所有数据：
delete from table_name
 
 
2）添加数据记录
id=0的列必须不存在，否则会出错
insert into table_name(field1, field2, ...) values(val1, val2, ...);
valx为需要存入字段的值。
例，往学生信息表添加数据：
Insert into student_info(stu_no, name) values(0001, alex);
insert into Artists (ArtistID,ArtistName) values (NULL,'Beach Boys');
insert into CDs (CDID,ArtistID,Title,Date) values (NULL,1,'Us','1992');
安卓代码：db.insert(String table, String nullColumnHack, ContentValues values);
 
3）修改数据记录
update table_name set field1=val1, field2=val2 where expression;
where是sql语句中用于条件判断的命令，expression为判断表达式
例，修改学生信息表学号为0001的数据记录：
update student_info set stu_no=0001, name='hence' where stu_no=0001;
安卓代码：db.update(String table, ContentValues values, String whereClause, String[] whereArgs);
 
4）删除数据记录
delete from table_name [where expression];
不加判断条件则清空表所有数据记录。
例，删除学生信息表学号为0001的数据记录：
delete from student_info where stu_no=0001;
安卓代码：db.delete(String table, String whereClause, String[] whereArgs);
db.delete("favorites", "audioTitle=? and conDeviceUuid=?", new String[] {audioTitle,conDeviceUuid}); 
 
5）查询数据记录
select指令基本格式：
SELECT column1, column2, columnN from table_name [where expression];
a查询输出所有数据记录
select * from table_name;
b限制输出数据记录数量
select * from table_name limit val;
c升序输出数据记录
select * from table_name order by field asc; （不写asc默认升序）
d降序输出数据记录
select * from table_name order by field desc;
e条件查询
select * from table_name where expression;
sqlite> SELECT * FROM COMPANY WHERE AGE >=25 AND SALARY >=65000;
SELECT * FROM COMPANY WHERE AGE IS NOT NULL;
SELECT * FROM COMPANY WHERE AGE >=25 OR SALARY >=65000;
select * from table_name where field in ('val1', 'val2', 'val3');
SELECT * FROM COMPANY WHERE AGE IN (25,27);
SELECT * FROM COMPANY WHERE AGE NOT IN (25,27);
select * from table_name where field between val1 and val2;
SELECT * FROM COMPANY WHERE AGE BETWEEN 25 AND 27;
SELECT AGE FROM COMPANY WHERE EXISTS (SELECT AGE FROM COMPANY WHERE SALARY >65000);
SELECT * FROM COMPANY WHERE AGE >(SELECT AGE FROM COMPANY WHERE SALARY >65000);
f查询记录数目
select count (*) from table_name;
g区分列数据
select distinct field from table_name;
有一些字段的值可能会重复出现，distinct去掉重复项，将列中各字段值单个列出。
h别名
SELECT 列 AS 别名，列 AS 别名 FROM
可以给返回数据集中的某些列起一个比较直观的名字，比如把 Cost 改为"Price Of Car"
select Name, Cost as 'Price of Car' From Cars;
I通配符
LIKE 用通配符匹配字符串
下划线 _ 匹配一个字符串
百分号 % 匹配多个字符串
LIKE 匹配字符串时不区分大小写
select * from Cars where Name like '___'
select * from Cars where Name like '%en'
多表查询：
sqlite>SELECT t1.ArtistName,CDs.Title FROM Artists t1, CDs WHERE t1.ArtistID=CDs.ArtistID
安卓代码：db.query(String table, String[] columns, String selection, String[] selectionArgs, 
                   String groupBy, String having, String orderBy); 
 
 
- 创建视图
sqlite> create view schema as select * from Member；

- 获得最后插入的自动增长量值
sqlite>select last_insert_rowid();　

 - 建立索引
当说数据表存在大量记录，索引有助于加快查找数据表速度。
create index index_name on table_name(field);
例，针对学生表stu_no字段，建立一个索引：
create index student_index on student_table(stu_no);
建立完成后，sqlite3在对该字段查询时，会自动使用该索引。

- 删除数据表或索引
drop table table_name;
drop index index_name;

- 删除列：
首先重命名post表。
ALTER TABLE post RENAME TO tmp_post;
在重新创建post表。
CREATE TABLE post(id integer primary key autoincrement,tb_l varchar(128) not null); 
把tmp_post的数据导入post，并删除tmp_post；
insert into post (tb_l) select tbl from tmp_post;
drop table tmp_post;
如果原表tmp_post和新创建的标post列数一致，并且是一一对应的话，可以用一下语句导入。
insert into post select * from tmp_talbe;

- table改名，增加列
ALTER TABLE company RENAME TO old_company;
ALTER TABLE old_company ADD COLUMN sex char(1);
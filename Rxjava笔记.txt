Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onNext(3);
                emitter.onComplete();
            }
        }).subscribe(new Observer<Integer>() {
        
        //RxJava 2.0 中新增的，传递参数为Disposable ，Disposable 相当于RxJava1.x中的Subscription,用于解除订阅。
            @Override
            public void onSubscribe(Disposable d) {
                Log.d(TAG, "subscribe");
            }

            @Override
            public void onNext(Integer value) {
                Log.d(TAG, "" + value);
            }

            @Override
            public void onError(Throwable e) {
                Log.d(TAG, "error");
            }

            @Override
            public void onComplete() {
                Log.d(TAG, "complete");
            }
        });
        
    public final Disposable subscribe() {}
    public final Disposable subscribe(Consumer<? super T> onNext) {}
    public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError) {} 
    public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError, Action onComplete) {}
    public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError, Action onComplete, Consumer<? super Disposable> onSubscribe) {}
    public final void subscribe(Observer<? super T> observer) {}
    .subscribe(DisposableObserver);
    
    .subscribeOn(Schedulers.io())  //指定Observable所在的线程，或者叫做事件产生的线程。只有第一次的有效。
    .observeOn(AndroidSchedulers.mainThread())  //指定 Observer所运行在的线程，或者叫做事件消费的线程。每调用一次,线程便会切换一次 
    
?Schedulers.io() 代表io操作的线程, 通常用于网络,读写文件等io密集型的操作.用于IO密集型任务，如异步阻塞IO操作，这个调度器的线程池会根据需要增长；对于普通的计算任务，请使用Schedulers.computation()；Schedulers.io(?)默认是一个CachedThreadScheduler，很像一个有线程缓存的新线程调度器.
?Schedulers.computation() 用于计算任务，如事件循环或和回调处理，不要用于IO操作(IO操作请使用Schedulers.io())；默认线程数等于处理器的数量
?Schedulers.newThread() 代表一个常规的新线程
?AndroidSchedulers.mainThread() 代表Android的主线程
Schedulers.from(executor) 	使用指定的Executor作为调度器
Schedulers.immediate(?) 	在当前线程立即开始执行任务
Schedulers.trampoline(?) 	当其它排队的任务完成后，在当前线程排队开始执行

可订阅的对象在RxJava1中只有Observable一种，之前我们经常会直接把数据源称作Observable。
而在RxJava2中扩充成了4种(Observable,Flowable,Single,Completable)，因此在之后还是把他们统称为数据源为宜。

Obsesrver用于订阅Observable，而Subscriber用于订阅Flowable
Subscriber：也是一种观察者，在2.0中 它与Observer没什么实质的区别，不同的是 Subscriber要与Flowable(也是一种被观察者)联合使用，该部分内容是2.0新增的，后续文章再介绍。
Single是订阅后只能接受到一次,可由Observable转换Observable.just(1).toSingle()
Completable与Single类似，只能接受到完成(onComplete)和错误(onError)，可由Observable转换:Observable.just(1).toCompletable()

提供了多个函数式接口 ，用于实现简便式的观察者模式。具体的函数式接口包括以下：
Action, BiConsumer, BiFunction, BiPredicate, BooleanSupplier, Cancellable, Consumer, Function, Function3,
Function4, Function5, Function6, Function7, Function8, Function9, IntFunction, LongConsumer, Predicate

慎用functions：Action，Consumer，Function 等
原因：这些方法只会对 onNext 事件进行处理，如果 observable 中出现异常产生了 onError 事件就会导致 app 奔溃。

///////////////////////////////////////////////////////////////////////////////////////////
        
1、创建Observable

- create操作符应该是最常见的操作符了，主要用于产生一个Obserable被观察者对象，为了方便大家的认知，
以后的教程中统一把被观察者Observable称为发射器（上游事件），观察者Observer称为接收器（下游事件）。
Observable.create(new ObservableOnSubscribe<Integer>() {
    @Override
    public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
        emitter.onNext(1);
        emitter.onNext(2);
        emitter.onNext(3);
    }
}).map(new Function<Integer, String>() {
    @Override
    public String apply(Integer integer) throws Exception {
        return "This is result " + integer;
    }
}).subscribe(new Consumer<String>() {
    @Override
    public void accept(String s) throws Exception {
        Log.d(TAG, s);
    }
});
        
- just()方式, 自动调用onNext( )发射数据
Observable<String> observable = Observable.just("Hello");

- fromIterable()方式，多次回调onNext()方法，每次传入一个item。
Observable<String> observable = Observable.fromIterable((Iterable<String>) arrayList);
所有Collection接口的实现类都可以作为Iterable对象直接传入fromIterable()方法。

- defer()方式，当观察者订阅时，才创建Observable，并且针对每个观察者创建都是一个新的Observable。
 Observable<String> observable = Observable.defer(new Callable<ObservableSource<? extends String>>() {
            @Override
            public ObservableSource<? extends String> call() throws Exception {
                return Observable.just("hello");
            }
        });

- interval( )方式，创建一个按固定时间间隔发射整数序列的Observable，可用作定时器。
 Observable<String> observable = Observable.interval(2, TimeUnit.SECONDS);  //按照固定2秒一次调用onNext()方法
 
 - range( )方式，创建一个发射特定整数序列的Observable，参数1为起始值，参数2为发送的个数，为0不发送，负数抛异常。
Observable<Integer> observable = Observable.range(1,20);  //调用20次nNext()方法，依次传入1-20数字。

- timer( )方式
Observable<Integer> observable = Observable.timer(2, TimeUnit.SECONDS);  //表示延迟2秒后，调用onNext()方法

- repeat( )方式,Observable的事件可以重复调用
Observable<Integer> observable = Observable.just(123).repeat();


需要注意的几点是：
1）在发射事件中，我们在发射了数值3之后，直接调用了e.onComlete()，虽然无法接收事件，但发送事件还是继续的。
2) 另外一个值得注意的点是，在RxJava 2.x中，可以看到发射事件方法相比1.x多了一个throws Excetion，意味着我们做一些特定操作再也不用try-catch了。
3) 并且2.x 中有一个Disposable概念，这个东西可以直接调用切断，可以看到，当它的isDisposed()返回为false的时候，接收器能正常接收事件，但当其为true的时候，接收器停止了接收。所以可以通过此参数动态控制接收事件了。



2、操作符

- Map
Observable<Integer> observable = Observable.just("hello").map(new Function<String, Integer>() {
    @Override
    public Integer apply(String s) throws Exception {
        return s.length();
    }
});

- FlatMap

重新生成一个Observable对象，并把数据转换成Observer想要的数据形式。它可以返回任何它想返回的Observable对象。flatMap并不能保证事件的顺序，如果需要保证，需要用到我们下面要讲的ConcatMap。
Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(@NonNull ObservableEmitter<Integer> e) throws Exception {
                e.onNext(1);
                e.onNext(2);
                e.onNext(3);
            }
        }).flatMap(new Function<Integer, ObservableSource<String>>() {
            @Override
            public ObservableSource<String> apply(@NonNull Integer integer) throws Exception {
                List<String> list = new ArrayList<>();
                for (int i = 0; i < 3; i++) {
                    list.add("I am value " + integer);
                }
                int delayTime = (int) (1 + Math.random() * 10);
                return Observable.fromIterable(list).delay(delayTime, TimeUnit.MILLISECONDS);
            }
        }).subscribeOn(Schedulers.newThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Consumer<String>() {
                    @Override
                    public void accept(@NonNull String s) throws Exception {
                        Log.e(TAG, "flatMap : accept : " + s + "\n");
                        mRxOperatorsText.append("flatMap : accept : " + s + "\n");
                    }
                });

为了区分concatMap，采用一个随机数，生成一个时间，然后通过delay操作符，做一个小延时操作，Log日志确认了是无序的。

Observable.create(new ObservableOnSubscribe<Integer>() {
    @Override
    public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
        emitter.onNext(1);
        emitter.onNext(2);
        emitter.onNext(3);
    }
}).flatMap(new Function<Integer, ObservableSource<String>>() {
    @Override
    public ObservableSource<String> apply(Integer integer) throws Exception {
        final List<String> list = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            list.add("I am value " + integer);
        }
        return Observable.fromIterable(list).delay(10,TimeUnit.MILLISECONDS);
    }
}).subscribe(new Consumer<String>() {
    @Override
    public void accept(String s) throws Exception {
        Log.d(TAG, s);
    }
});
使用flatmap是无序的
D/TAG: I am value 1
D/TAG: I am value 1
D/TAG: I am value 1
D/TAG: I am value 3
D/TAG: I am value 3
D/TAG: I am value 3
D/TAG: I am value 2
D/TAG: I am value 2
D/TAG: I am value 2

- concatMap
concatMap 与 FlatMap 的唯一区别就是 concatMap 保证了顺序.
        Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onNext(3);
            }
        }).concatMap(new Function<Integer, ObservableSource<String>>() {
            @Override
            public ObservableSource<String> apply(Integer integer) throws Exception {
                final List<String> list = new ArrayList<>();
                for (int i = 0; i < 3; i++) {
                    list.add("I am value " + integer);
                }
                return Observable.fromIterable(list).delay(10,TimeUnit.MILLISECONDS);
            }
        }).subscribe(new Consumer<String>() {
            @Override
            public void accept(String s) throws Exception {
                Log.d(TAG, s);
            }
        });
        
        使用concatMap是有序的
        D/TAG: I am value 1   
        D/TAG: I am value 1   
        D/TAG: I am value 1   
        D/TAG: I am value 2   
        D/TAG: I am value 2   
        D/TAG: I am value 2   
        D/TAG: I am value 3   
        D/TAG: I am value 3   
        D/TAG: I am value 3

- compose
        compose()是唯一一个能从流中获取原生Observable 的方法，因此，影响整个流的操作符（像subscribeOn()和observeOn()）需要使用compose()，相对的，如果你在flatMap()中使用subscribeOn()/observeOn()，它只影响你创建的flatMap()中的Observable,而不是整个流。
        当你创建一个Observable流并且内联了一堆操作符以后，compose()会立即执行，flatMap()则是在onNext()被调用以后才会执行，换句话说，flatMap()转换的是每个项目，而compose()转换的是整个流。
        flatMap()一定是低效率的，因为他每次调用onNext()之后都需要创建一个新的Observable，compose()是操作在整个流上的。

换句话说就是提供给他一个Observable它会返回给你另一个Observable，这和内联一系列操作符有着同等功效。
实际操作下，写个方法，创建一个Transformer调度器：
<T> Transformer<T, T> applySchedulers() {  
    return new Transformer<T, T>() {
        @Override
        public Observable<T> call(Observable<T> observable) {
            return observable.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread());
        }
    };
}

用lambda表达式看上去会好看些：
<T> Transformer<T, T> applySchedulers() {  
    return observable -> observable.subscribeOn(Schedulers.io())
        .observeOn(AndroidSchedulers.mainThread());
}
现在调用这个方法会是怎么样的呢：
Observable.from(someSource)  
    .map(data -> manipulate(data))
    .compose(applySchedulers())
    .subscribe(data -> doSomething(data));


- Zip

zip专用于合并事件，该合并不是连接（连接操作符后面会说），而是两两配对，最终配对出的Observable发射事件数目只和少的那个相同。
Observable.zip(getStringObservable(), getIntegerObservable(), new BiFunction<String, Integer, String>() {
            @Override
            public String apply(@NonNull String s, @NonNull Integer integer) throws Exception {
                return s + integer;
            }
        }).subscribe(new Consumer<String>() {
            @Override
            public void accept(@NonNull String s) throws Exception {
                mRxOperatorsText.append("zip : accept : " + s + "\n");
                Log.e(TAG, "zip : accept : " + s + "\n");
            }
        });
需要注意的是：
1)zip组合事件的过程就是分别从发射器A和发射器B各取出一个事件来组合，并且一个事件只能被使用一次，组合的顺序是严格按照事件发送的顺序来进行的，所以上面截图中，可以看到，1永远是和A 结合的，2永远是和B结合的。
2)最终组合的发送数量和最少的那个发送器的发送事件数目相同。

- Concat

对于单一的把两个发射器连接成一个发射器，虽然 zip 不能完成，但我们还是可以自力更生，官方提供的 concat 让我们的问题得到了完美解决。

Observable.concat(Observable.just(1,2,3), Observable.just(4,5,6))
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept(@NonNull Integer integer) throws Exception {
                        mRxOperatorsText.append("concat : "+ integer + "\n");
                        Log.e(TAG, "concat : "+ integer + "\n" );
                    }
                });
结果：顺序打印1~6


- sample
.sample(2, TimeUnit.SECONDS)  //sample取样
每隔2秒取一个事件给下游


7、distinct

这个操作符非常的简单、通俗、易懂，就是简单的去重嘛，我甚至都不想贴代码，但人嘛，总得持之以恒。
Observable.just(1, 1, 1, 2, 2, 3, 4, 5)
                .distinct()
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept(@NonNull Integer integer) throws Exception {
                        mRxOperatorsText.append("distinct : " + integer + "\n");
                        Log.e(TAG, "distinct : " + integer + "\n");
                    }
                });
                输出：1,2,3,4,5
                
- Filter
接受一个参数，让其过滤掉不符合我们条件的值, 返回true则表示数据满足条件
Observable.just(1, 20, 65, -5, 7, 19)
          .filter(new Predicate<Integer>() {
              @Override
              public boolean test(@NonNull Integer integer) throws Exception {
                  return integer >= 10;
              }
          }).subscribe(new Consumer<Integer>() {
            @Override
            public void accept(@NonNull Integer integer) throws Exception {
                mRxOperatorsText.append("filter : " + integer + "\n");
                Log.e(TAG, "filter : " + integer + "\n");
            }
        });
        
9、buffer

 buffer 操作符接受两个参数，buffef(count,skip)，作用是将 Observable 中的数据按 skip (步长) 分成最大不超过
 count 的 buffer ，然后生成一个 Observable 。也许你还不太理解，我们可以通过我们的示例图和示例代码来进一步深化它。
 Observable.just(1, 2, 3, 4, 5)
                .buffer(3, 2)
                .subscribe(new Consumer<List<Integer>>() {
                    @Override
                    public void accept(@NonNull List<Integer> integers) throws Exception {
                        mRxOperatorsText.append("buffer size : " + integers.size() + "\n");
                        Log.e(TAG, "buffer size : " + integers.size() + "\n");
                        mRxOperatorsText.append("buffer value : ");
                        Log.e(TAG, "buffer value : " );
                        for (Integer i : integers) {
                            mRxOperatorsText.append(i + "");
                            Log.e(TAG, i + "");
                        }
                        mRxOperatorsText.append("\n");
                        Log.e(TAG, "\n");
                    }
                });
                
如图，我们把1,2,3,4,5依次发射出来，经过buffer 操作符，其中参数 count 为3， skip 为2，而我们的输出 依次是 123，345，5。显而易见，我们 buffer 的第一个参数是count，代表最大取值，在事件足够的时候，一般都是取count个值，然后每次跳过skip个事件。其实看 Log 日志，我相信大家都明白了。

10、timer

timer 很有意思，相当于一个定时任务。在1.x 中它还可以执行间隔逻辑，但在2.x中此功能被交给了 interval，下一个会介绍。但需要注意的是，timer 和 interval 均默认在新线程。
mRxOperatorsText.append("timer start : " + TimeUtil.getNowStrTime() + "\n");
        Log.e(TAG, "timer start : " + TimeUtil.getNowStrTime() + "\n");
        Observable.timer(2, TimeUnit.SECONDS)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread()) // timer 默认在新线程，所以需要切换回主线程
                .subscribe(new Consumer<Long>() {
                    @Override
                    public void accept(@NonNull Long aLong) throws Exception {
                        mRxOperatorsText.append("timer :" + aLong + " at " + TimeUtil.getNowStrTime() + "\n");
                        Log.e(TAG, "timer :" + aLong + " at " + TimeUtil.getNowStrTime() + "\n");
                    }
                });
                
显而易见，当我们两次点击按钮触发这个事件的时候，接收被延迟了2秒。

11、interval

如同我们上面可说，interval 操作符用于间隔时间执行某个操作，其接受三个参数，分别是第一次发送延迟，间隔时间，时间单位。      
mRxOperatorsText.append("interval start : " + TimeUtil.getNowStrTime() + "\n");
        Log.e(TAG, "interval start : " + TimeUtil.getNowStrTime() + "\n");
        Observable.interval(3,2, TimeUnit.SECONDS)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread()) // 由于interval默认在新线程，所以我们应该切回主线程
                .subscribe(new Consumer<Long>() {
                    @Override
                    public void accept(@NonNull Long aLong) throws Exception {
                        mRxOperatorsText.append("interval :" + aLong + " at " + TimeUtil.getNowStrTime() + "\n");
                        Log.e(TAG, "interval :" + aLong + " at " + TimeUtil.getNowStrTime() + "\n");
                    }
                }); 
                
如同 Log 日志一样，第一次延迟了3秒后接收到，后面每次间隔了2秒。

然而，心细的小伙伴可能会发现，由于我们这个是间隔执行，所以当我们的Activity都销毁的时候，实际上这个操作还依然在进行，所以，我们得花点小心思让我们在不需要它的时候干掉它。查看源码发现，我们subscribe(Cousumer<? super T> onNext)返回的是Disposable，我们可以在这上面做文章。 

- doOnNext

让订阅者在接收到数据之前干点有意思的事情。假如我们在获取到数据之前想先保存一下它，无疑我们可以这样实现。 
相当于在subscribe之前加了一次subscribe(Consumer<? super T> onNext)   
Observable.just(1, 2, 3, 4)
                .doOnNext(new Consumer<Integer>() {
                    @Override
                    public void accept(@NonNull Integer integer) throws Exception {
                        mRxOperatorsText.append("doOnNext 保存 " + integer + "成功" + "\n");
                        Log.e(TAG, "doOnNext 保存 " + integer + "成功" + "\n");
                    }
                }).subscribe(new Consumer<Integer>() {
            @Override
            public void accept(@NonNull Integer integer) throws Exception {
                mRxOperatorsText.append("doOnNext :" + integer + "\n");
                Log.e(TAG, "doOnNext :" + integer + "\n");
            }
        });


13、skip

skip 很有意思，其实作用就和字面意思一样，接受一个 long 型参数 count ，代表跳过 count 个数目开始接收。

Observable.just(1,2,3,4,5)
                .skip(2)
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept(@NonNull Integer integer) throws Exception {
                        mRxOperatorsText.append("skip : "+integer + "\n");
                        Log.e(TAG, "skip : "+integer + "\n");
                    }
                });
                
                输出：3,4,5
                
- take

接受一个 long 型参数 count ，代表至多接收 count 个数据。

Flowable.fromArray(1,2,3,4,5)
                .take(2)
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept(@NonNull Integer integer) throws Exception {
                        mRxOperatorsText.append("take : "+integer + "\n");
                        Log.e(TAG, "accept: take : "+integer + "\n" );
                    }
                });
                
输出：1,2


                
16、Single

顾名思义，Single 只会接收一个参数，而SingleObserver 只会调用onError 或者onSuccess。
Single.just(new Random().nextInt())
                .subscribe(new SingleObserver<Integer>() {
                    @Override
                    public void onSubscribe(@NonNull Disposable d) {

                    }

                    @Override
                    public void onSuccess(@NonNull Integer integer) {
                        mRxOperatorsText.append("single : onSuccess : "+integer+"\n");
                        Log.e(TAG, "single : onSuccess : "+integer+"\n" );
                    }

                    @Override
                    public void onError(@NonNull Throwable e) {
                        mRxOperatorsText.append("single : onError : "+e.getMessage()+"\n");
                        Log.e(TAG, "single : onError : "+e.getMessage()+"\n");
                    }
                });
                
18、debounce

去除发送频率过快的项，看起来好像没啥用处，但你信我，后面绝对有地方很有用武之地。

Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(@NonNull ObservableEmitter<Integer> emitter) throws Exception {
                // send events with simulated time wait
                emitter.onNext(1); // skip
                Thread.sleep(400);
                emitter.onNext(2); // deliver
                Thread.sleep(505);
                emitter.onNext(3); // skip
                Thread.sleep(100);
                emitter.onNext(4); // deliver
                Thread.sleep(605);
                emitter.onNext(5); // deliver
                Thread.sleep(510);
                emitter.onComplete();
            }
        }).debounce(500, TimeUnit.MILLISECONDS)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept(@NonNull Integer integer) throws Exception {
                        mRxOperatorsText.append("debounce :" + integer + "\n");
                        Log.e(TAG,"debounce :" + integer + "\n");
                    }
                });
代码很清晰，去除发送间隔时间小于500毫秒的发射事件，所以1 和 3 被去掉了。
输出：2,4,5

        
20、last

last 操作符仅取出可观察到的最后一个值，或者是满足某些条件的最后一项。
Observable.just(1, 2, 3)
                .last(4)
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept(@NonNull Integer integer) throws Exception {
                        mRxOperatorsText.append("last : " + integer + "\n");
                        Log.e(TAG, "last : " + integer + "\n");
                    }
                });
                
输出：3

21、merge

merge 顾名思义，熟悉版本控制工具的你一定不会不知道 merge 命令，而在 Rx 操作符中，merge 的作用是把多个 Observable 结合起来，接受可变参数，也支持迭代器集合。注意它和 concat 的区别在于，不用等到 发射器 A 发送完所有的事件再进行发射器 B 的发送。

Observable.merge(Observable.just(1, 2), Observable.just(3, 4, 5))
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept(@NonNull Integer integer) throws Exception {
                        mRxOperatorsText.append("merge :" + integer + "\n");
                        Log.e(TAG, "accept: merge :" + integer + "\n" );
                    }
                });

22、reduce

reduce 操作符每次用一个方法处理一个值，可以有一个 seed 作为初始值。
Observable.just(1, 2, 3)
               .reduce(new BiFunction<Integer, Integer, Integer>() {
                   @Override
                   public Integer apply(@NonNull Integer integer, @NonNull Integer integer2) throws Exception {
                       return integer + integer2;
                   }
               }).subscribe(new Consumer<Integer>() {
           @Override
           public void accept(@NonNull Integer integer) throws Exception {
               mRxOperatorsText.append("reduce : " + integer + "\n");
               Log.e(TAG, "accept: reduce : " + integer + "\n");
           }
       });
       
可以看到，代码中，我们中间采用 reduce ，支持一个 function 为两数值相加，所以应该最后的值是：1 + 2 = 3 + 3 = 6 ， 而Log 日志完美解决了我们的问题。

23、scan

scan 操作符作用和上面的 reduce 一致，唯一区别是 reduce 是个只追求结果的坏人，而 scan 会始终如一地把每一个步骤都输出。

Observable.just(1, 2, 3)
                .scan(new BiFunction<Integer, Integer, Integer>() {
                    @Override
                    public Integer apply(@NonNull Integer integer, @NonNull Integer integer2) throws Exception {
                        return integer + integer2;
                    }
                }).subscribe(new Consumer<Integer>() {
            @Override
            public void accept(@NonNull Integer integer) throws Exception {
                mRxOperatorsText.append("scan " + integer + "\n");
                Log.e(TAG, "accept: scan " + integer + "\n");
            }
        });
        输出：1,3,6
        
24、window

按照实际划分窗口，将数据发送给不同的Observable

mRxOperatorsText.append("window\n");
       Log.e(TAG, "window\n");
       Observable.interval(1, TimeUnit.SECONDS) // 间隔一秒发一次
               .take(15) // 最多接收15个
               .window(3, TimeUnit.SECONDS)
               .subscribeOn(Schedulers.io())
               .observeOn(AndroidSchedulers.mainThread())
               .subscribe(new Consumer<Observable<Long>>() {
                   @Override
                   public void accept(@NonNull Observable<Long> longObservable) throws Exception {
                       mRxOperatorsText.append("Sub Divide begin...\n");
                       Log.e(TAG, "Sub Divide begin...\n");
                       longObservable.subscribeOn(Schedulers.io())
                               .observeOn(AndroidSchedulers.mainThread())
                               .subscribe(new Consumer<Long>() {
                                   @Override
                                   public void accept(@NonNull Long aLong) throws Exception {
                                       mRxOperatorsText.append("Next:" + aLong + "\n");
                                       Log.e(TAG, "Next:" + aLong + "\n");
                                   }
                               });
                   }
               });

///////////////////////////////////////////////////////////////////////////////////////////

关于Disposable
Disposable, 这个单词的字面意思是一次性用品,用完即可丢弃的。在RxJava中当调用它的dispose()方法时,会将Observer与Observable之间的连接切断, 导致Observer收不到事件，而Observable的事件却仍在继续执行。
因此Disposable的对象通过3种方式通过观察者获得。

1）Observer接口
Observer<String> observer = new Observer<Integer>() {
            private Disposable mDisposable;  
            private int i;

            @Override
            public void onSubscribe(Disposable d) {
                Log.d(TAG, "subscribe");
                mDisposable = d;  //获取disposable
            }

            @Override
            public void onNext(Integer value) {
                Log.d(TAG, "onNext: " + value);
                i++;
                if (i == 2) {
                    Log.d(TAG, "dispose");
                    mDisposable.dispose();
                    Log.d(TAG, "isDisposed : " + mDisposable.isDisposed());
                }
            }
            ... ...
    
2）Consumer等其他函数式接口返回Disposable
   public final Disposable subscribe(Consumer<? super T> onNext) {} 等

在Flowable和Subscriber使用时，变成Subscription，切断时调用Subscription.cancel()方法：
Subscriber<Integer> subscriber = new Subscriber<Integer>() {
            @Override
            public void onSubscribe(Subscription s) {... ...
            

3） DisposableObserver<String> observer = new DisposableObserver<String>() {
        @Override
        public void onNext(String value) {

        }

        @Override
        public void onError(Throwable e) {

        }

        @Override
        public void onComplete() {

        }
    };
    
         
容器CompositeDisposable, 每得到一个Disposable时就调用CompositeDisposable.add()将它添加到容器中, 在退出的时候, 调用CompositeDisposable.clear() 即可切断所有的水管.
private final CompositeDisposable disposables = new CompositeDisposable();
disposables.add(observer);
在Activity的onDestroy中disposables.clear();
 
Observable<String> observable = Observable.create(new ObservableOnSubscribe<String>() {
    @Override
    public void subscribe(ObservableEmitter<String> e) throws Exception {
        if (e.isDisposed()) return;  //可以在Observable创建时添加切断控制
        SystemClock.sleep(2000);
        e.onNext("next");
        e.onComplete();
    }
});
    
///////////////////////////////////////////////////////////////////////////////////////////

3.关于Flowable和背压backpressure
Flowable是一个被观察者，与Subscriber(观察者)配合使用，解决Backpressure问题。

- 如果生产者和消费者在一个线程的情况下，无论生产者的生产速度有多快，每生产一个事件都会通知消费者，等待消费者消费完毕，再生产下一个事件。所以在这种情况下，根本不存在Backpressure问题。即同步情况下，Backpressure问题不存在。
- 如果生产者和消费者不在同一线程的情况下，如果生产者的速度大于消费者的速度，就会产生Backpressure问题。即异步情况下，Backpressure问题才会存在。对于observable数据会一直放到内存中，直到发生OutOfMemoryError。在RxJava1中，使用observable时，在内存数据超过128个时将会抛出MissingBackpressureException错误。

Flowable.create(new FlowableOnSubscribe<Integer>() {
            @Override
            public void subscribe(FlowableEmitter<Integer> emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onNext(3);
                emitter.onComplete();
            }
        }, BackpressureStrategy.ERROR) //增加了一个参数是策略
        .subscribeOn(Schedulers.io())
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Subscriber<Integer>() {
            @Override
            public void onSubscribe(Subscription s) {
            //消费能力,向生产者申请可以消费的事件数量,如不显式调用request就表示消费能力为0
                mSubscription = s;
                s.request(Long.MAX_VALUE);    
            }
            @Override
            public void onNext(Integer integer) {
                Log.d(TAG, "onNext: " + integer);
            }
            @Override
            public void onError(Throwable t) {
                Log.w(TAG, "onError: ", t);
            }
            @Override
            public void onComplete() {
                Log.d(TAG, "onComplete");
            }
        }); 

RxJava中有个缓存池，缓存消费者处理不了暂时缓存下来的数据，默认只能缓存128个事件。无论request()中传入的数字比128大或小，缓存池中在刚开始都会存入128个事件。当然如果本身并没有这么多事件需要发送，则不会存128个事件。

策略：
如果Flowable对象不是自己创建的，还可以采用onBackpressureBuffer()、onBackpressureDrop()、onBackpressureLatest()的方式指定。Flowable.just(1).onBackpressureBuffer()...
1) BackpressureStrategy.ERROR
如果缓存池溢出，就会立刻抛出MissingBackpressureException异常。如果让Flowable发送129个事件，而Subscriber一个也不处理，就产生了异常。

2) BackpressureStrategy.BUFFER
把默认存128个事件的缓存池换成更大的缓存池, 比较消耗内存容易产生OOM。如果消费能力强可以使用。

3) BackpressureStrategy.DROP
消费者通过request()传入其需求n，然后生产者把n个事件传递给消费者供其消费。其他消费不掉的事件就丢掉。
例如
public void onSubscribe(Subscription s) {
    mSubscription = s;
    s.request(50);    
}
通过mSubscription.request(50)，一次消费50个事件。
01-20 17:25:44.331 3327-3327/com.lvr.rxjavalearning D/MainActivity: onNext: 0
..........................................................
01-20 17:25:44.331 3327-3327/com.lvr.rxjavalearning D/MainActivity: onNext: 49
01-20 17:25:47.891 3327-3327/com.lvr.rxjavalearning D/MainActivity: onNext: 50
..........................................................
01-20 17:25:47.891 3327-3327/com.lvr.rxjavalearning D/MainActivity: onNext: 99
01-20 17:25:50.241 3327-3327/com.lvr.rxjavalearning D/MainActivity: onNext: 100
..........................................................
01-20 17:25:50.241 3327-3327/com.lvr.rxjavalearning D/MainActivity: onNext: 127
01-20 17:25:50.241 3327-3327/com.lvr.rxjavalearning D/MainActivity: onNext: 17749078
..........................................................
01-20 17:25:50.241 3327-3327/com.lvr.rxjavalearning D/MainActivity: onNext: 17749099
生产者一次性传入128个事件进入缓存池。点击“开始”按钮，消费了50个。然后第一次点击“消费”按钮，又消费了50个，第二次点击“消费”按钮，再次消费50个。然而此时原来的128个缓存只剩下28个了，所以先消费掉28个，然后剩下22个是后来传入的（其实后来的是在消费了96个后传入，并一次性在缓存池中又传入了96个，具体可以看源码，这里不解释了）。

3) BackpressureStrategy.LATEST
与DROP功能基本一致，区别就是LATEST总能使消费者能够接收到生产者产生的最后一个事件。
例如以上述例子展示，唯一的区别就是Flowable不再无限发事件，只发送1000000个。
01-20 17:50:30.459 25334-25334/com.lvr.rxjavalearning D/MainActivity: onNext: 0
..........................................................
01-20 17:50:30.459 25334-25334/com.lvr.rxjavalearning D/MainActivity: onNext: 49
01-20 17:50:31.569 25334-25334/com.lvr.rxjavalearning D/MainActivity: onNext: 50
..........................................................
01-20 17:50:32.459 25334-25334/com.lvr.rxjavalearning D/MainActivity: onNext: 100
01-20 17:50:32.459 25334-25334/com.lvr.rxjavalearning D/MainActivity: onNext: 101
..........................................................
01-20 17:50:32.459 25334-25334/com.lvr.rxjavalearning D/MainActivity: onNext: 127
01-20 17:50:32.459 25334-25334/com.lvr.rxjavalearning D/MainActivity: onNext: 999999
唯一的区别就在最后一行。这就是LATEST与DROP的区别。

//////////////////////////////////////////////////////////////////////////////////////////
关于异常

https://blog.csdn.net/io_field/article/details/52439967

catch操作符拦截原Observable的onError通知，将它替换为其它的数据项或数据序列，让产生的Observable能够正常终止或者根本不终止。

在RxJava中，catch实现为三个不同的操作符：

    onErrorReturn:让Observable遇到错误时发射一个特殊的项并且正常终止。
    onErrorResumeNext:让Observable在遇到错误时开始发射第二个Observable的数据序列。
    onExceptionResumeNext:让Observable在遇到错误时继续发射后面的数据项。


///////////////////////////////////////////////////////////////////////////////////////////

      
4.例子： 
  
1）        
Observable.from(folders)
    .flatMap(new Func1<File, Observable<File>>() {
        @Override
        public Observable<File> call(File file) {
            return Observable.from(file.listFiles());
        }
    })
    .filter(new Func1<File, Boolean>() {
        @Override
        public Boolean call(File file) {
            return file.getName().endsWith(".png");
        }
    })
    .map(new Func1<File, Bitmap>() {
        @Override
        public Bitmap call(File file) {
            return getBitmapFromFile(file);
        }
    })
    .subscribeOn(Schedulers.io())
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(new Action1<Bitmap>() {
        @Override
        public void call(Bitmap bitmap) {
            imageCollectorView.addImage(bitmap);
        }
    });
    
    
2）
结合Retrofit
要使用Retrofit,先在Gradle中添加配置:
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.okhttp3:okhttp:3.5.0'
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    
定义Api接口:
接口url：http://v.juhe.cn/weather/citys?key=.... 其中key是你申请时聚合数据给你的密钥。
public interface Api {
    @GET("citys")
    Observable<AllCity> getAllCity(@Query("key") String key);  
}  

创建一个Retrofit客户端:
private static Retrofit create() {
     OkHttpClient client = new OkHttpClient.Builder()
                .connectTimeout(9, TimeUnit.MILLISECONDS)
                .readTimeout(10, TimeUnit.MILLISECONDS)
                .writeTimeout(10, TimeUnit.MILLISECONDS)
                .cache(new Cache(httpCacheDirectory, 10 * 1024 * 1024))//设置缓存10M
                .build();

    return new Retrofit.Builder().baseUrl(baseUrl)
            .client(client)
            .addConverterFactory(GsonConverterFactory.create())
            .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
            .build();
}

Retrofit retrofit = create();
Api api = retrofit.create(Api.class);

public class AllCity {
    private String error_code;
    private String reason;
    private String resultcode;
    private ArrayList<City> result;
//省略getter,setter方法
}

Observable<AllCity> observable = api.getAllCity(appkey);
observable.subscribeOn(Schedulers.io())
        .flatMap(new Function<AllCity, ObservableSource<City>>() {
            @Override
            public ObservableSource<City> apply(AllCity city) throws Exception {
                ArrayList<City> result = city.getResult();
                return Observable.fromIterable(result);
            }
        })
        .filter(new Predicate<City>() {
            @Override
            public boolean test(City city) throws Exception {
                String id = city.getId();
                if(Integer.parseInt(id)<5){
                    return true;
                }
                return false;
            }
        })
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Consumer<City>() {
            @Override
            public void accept(City city) throws Exception {
                System.out.println(city);
            }
        });
        
/////////////////////////////////////////////////////////////////////////////////////

结合线程池：
ApiService as = ApiManager.getApiService();
 final ExecutorService es = Executors.newFixedThreadPool(9);
                final int count = Bimp.tempSelectBitmap.size();
                final CountDownLatch finishedLatch = new CountDownLatch(count);

                final long start = System.currentTimeMillis();

                for (int k = 0; k < count; k++) {
                    final String fp = Bimp.tempSelectBitmap.get(k).getImagePath();
                    RequestBody fbody = RequestBody.create(MediaType.parse("image/*"), new File(fp));
                    as.uploadAttach(fbody)
                            .subscribeOn(Schedulers.from(es)) //.subscribeOn(Schedulers.io()) 或者 用Observable.merge来合并这些请求。
                            .observeOn(Schedulers.computation())
                            .subscribe(new Subscriber<UploadAttachJSON>() {

                                @Override
                                public void onCompleted() {
                                }

                                @Override
                                public void onError(Throwable e) {
                                    finishedLatch.countDown();
                                    Log.e("UPLOAD FAILED -------->", fp);
                                }

                                @Override
                                public void onNext(UploadAttachJSON uploadAttachJSON) {
                                    finishedLatch.countDown();
                                    sb.append(uploadAttachJSON.url).append(",");
                                    Log.e("UPLOADED IMAGE URL -->", uploadAttachJSON.url);

                                    h.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            pd.setMessage("正在上传...  " + (count - finishedLatch.getCount()) + "/" + count);
                                        }
                                    });
                                }

                            });
                }

                try {
                    finishedLatch.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                long end = System.currentTimeMillis();
                Log.e("IMAGE UPLOAD COMPLETED", (end - start) + "");
                es.shutdown();
                
//////////////////////////////////////////////////////////////////////
记录：
- 重试：
.retryWhen(new Function<Flowable<Throwable>, Publisher<?>>() {
    @Override
    public Publisher<?> apply(Flowable<Throwable> throwableFlowable) throws Exception {
        return throwableFlowable.flatMap(new Function<Throwable, Publisher<Long>>() {
            @Override
            public Publisher<Long> apply(Throwable throwable) throws Exception {
                return Flowable.timer(1, TimeUnit.SECONDS);
            }
        });
    }
});

或
import java.util.concurrent.TimeUnit;

import rx.Observable;
import rx.functions.Func1;
import rx.functions.Func2;

/**
 * Created by yuanfei on 2018/2/26.
 */

public class RetryWhenNet implements Func1<Observable<? extends Throwable>, Observable<?>> {

//重试延迟时间
private int retryDelayTime = 3000;
//重试次数
private int retryDelayNum = 3;

public RetryWhenNet(int retryDelayTime,int retryDelayNum){
    this.retryDelayTime = retryDelayTime;
    this.retryDelayNum = retryDelayNum;
}

@Override
public Observable<?> call(Observable<? extends Throwable> observable) {
    return observable.zipWith(Observable.range(1, retryDelayNum), new Func2<Throwable, Integer, Integer>() {
        @Override
        public Integer call(Throwable throwable, Integer integer) {

            //在这里判断错误的类型

            return 1;
        }
    }).flatMap(new Func1<Integer, Observable<?>>() {
        @Override
        public Observable<?> call(Integer integer) {
            return Observable.just(null).delay(retryDelayTime, TimeUnit.MILLISECONDS);
        }
    });
}
}

或

/** * 自定义的，重试N次的拦截器 * 通过：addInterceptor 设置 */ 
public static class Retry implements Interceptor { 
public int maxRetry;//最大重试次数 
private int retryNum = 0;//假如设置为3次重试的话，则最大可能请求4次（默认1次+3次重试） 
public Retry(int maxRetry) { this.maxRetry = maxRetry; } 
@Override public Response intercept(@NonNull Chain chain) throws IOException { 
Request request = chain.request(); 
Response response = chain.proceed(request); 
Log.i("Retry","num:"+retryNum); 
while (!response.isSuccessful() && retryNum < maxRetry) { 
retryNum++; Log.i("Retry","num:"+retryNum); 
response = chain.proceed(request); } 
return response; } 
}



- 下游按顺序消耗事件
concatMap
activity主要生命周期的方法说明： onCreate(Bundle savedInstanceState)：创建activity时调用。设置在该方法中，还以Bundle的形式提供对以前储存的任何状态的访问！
　　onStart()：activity变为在屏幕上对用户可见时调用。
　　onResume()：activity开始与用户交互时调用（无论是启动还是重新启动一个活动，该方法总是被调用的）。 onPause()：activity被暂停或收回cpu和其他资源时调用，该方法用于保存活动状态的，也是保护现场，压栈吧！搜索
　　onStop()：activity被停止并转为不可见阶段及后续的生命周期事件时调用。
　　onRestart()：重新启动activity时调用。该活动仍在栈中，而不是启动新的活动。 OnDestroy()：activity被完全从系统内存中移除时调用
总结一下整个Activity的生命周期
　　补充一点，当前Activity产生事件弹出Toast和AlertDialog的时候Activity的生命周期不会有改变
　　Activity运行时按下HOME键(跟被完全覆盖是一样的)：onSaveInstanceState --> onPause --> onStop       onRestart -->onStart--->onResume
　　Activity未被完全覆盖只是失去焦点：onPause--->onResume

-----------------------------------------------------------------------------
- singleTop:
D: Activity1 onCreate: 
D: Activity1 onStart: 
D: Activity1 onResume: com.satcatche.remote.mycapplication.MainActivity@a2c4563
start Activity1 -》
D: Activity1 onPause: 
D: Activity1 onNewIntent: 
D: Activity1 onResume: com.satcatche.remote.mycapplication.MainActivity@a2c4563

- singleTask:
D: Activity1 onCreate: 
D: Activity1 onStart: 
D: Activity1 onResume: com.satcatche.remote.mycapplication.MainActivity@ca4e46a
start Activity2 -》
D: Activity1 onPause: 
D: Activity2 onCreate: 
D: Activity2 onStart: 
D: Activity2 onResume: com.satcatche.remote.mycapplication.Main2Activity@829388
D: Activity1 onSaveInstanceState: 
D: Activity1 onStop: 
start Activity1 -》
D: Activity2 onPause: 
D: Activity1 onNewIntent: 
D: Activity1 onRestart: 
D: Activity1 onStart: 
D: Activity1 onResume: com.satcatche.remote.mycapplication.MainActivity@ca4e46a
D: Activity2 onStop: 
D: Activity2 onDestroy: 

-----------------------------------------------------------------------------

横竖屏切换（旧）
　　1、新建一个Activity，并把各个生命周期打印出来
　　2、运行Activity，得到如下信息
　　onCreate-->onStart-->onResume-->
　　3、按crtl+f12切换成横屏时
　　onSaveInstanceState-->onPause-->onStop-->onDestroy-->onCreate-->onStart-->onRestoreInstanceState-->onResume-->
　　4、再按crtl+f12切换成竖屏时，发现打印了两次相同的log
　　onSaveInstanceState-->onPause-->onStop-->onDestroy-->onCreate-->onStart-->onRestoreInstanceState-->onResume-->onSaveInstanceState-->onPause-->onStop-->onDestroy-->onCreate-->onStart-->onRestoreInstanceState-->onResume-->
　　5、修改AndroidManifest.xml，把该Activity添加 android:configChanges="orientation"，执行步骤3
　　onSaveInstanceState-->onPause-->onStop-->onDestroy-->onCreate-->onStart-->onRestoreInstanceState-->onResume-->
　　6、再执行步骤4，发现不会再打印相同信息，但多打印了一行onConfigChanged
　　onSaveInstanceState-->onPause-->onStop-->onDestroy-->onCreate-->onStart-->onRestoreInstanceState-->onResume-->onConfigurationChanged-->
　　7、把步骤5的android:configChanges="orientation" 改成 android:configChanges="orientation|keyboardHidden"，执行步骤3，就只打印onConfigChanged
　　onConfigurationChanged-->
　　8、执行步骤4
　　onConfigurationChanged-->onConfigurationChanged-->
　　总结：
　　1、不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，切横屏时会执行一次，切竖屏时会执行两次
　　2、设置Activity的android:configChanges="orientation"时，切屏还是会重新调用各个生命周期，切横、竖屏时只会执行一次
　　3、设置Activity的android:configChanges="orientation|keyboardHidden"时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法

==============================================================================================
横竖屏切换（新）
https://blog.csdn.net/qq_36713816/article/details/80538467

1.AndroidManifest没有设置configChanges属性

竖屏启动：

onCreate -->onStart-->onResume

切换横屏：

onPause -->onSaveInstanceState -->onStop -->onDestroy -->onCreate-->onStart -->

onRestoreInstanceState-->onResume -->onPause -->onStop -->onDestroy       

（Android 6.0 Android 7.0 Android 8.0）

横屏启动：

onCreate -->onStart-->onResume

切换竖屏：

onPause -->onSaveInstanceState -->onStop -->onDestroy -->onCreate-->onStart -->

onRestoreInstanceState-->onResume -->onPause -->onStop -->onDestroy       

（Android 6.0 Android 7.0 Android 8.0）
总结：没有设置configChanges属性Android 6.0 7.0 8.0 系统手机 表现都是一样的，当前的界面调用onSaveInstanceState走一遍流程，然后重启调用onRestoreInstanceState再走一遍完整流程，最终destory。

2.AndroidManifest设置了configChanges   android:configChanges="orientation"

竖屏启动：

onCreate -->onStart-->onResume

切换横屏：

onPause -->onSaveInstanceState -->onStop -->onDestroy -->onCreate-->onStart -->

onRestoreInstanceState-->onResume -->onPause -->onStop -->onDestroy        

（Android 6.0）
onConfigurationChanged-->onPause -->onSaveInstanceState -->onStop -->onDestroy -->

onCreate-->onStart -->onRestoreInstanceState-->onResume -->onPause -->onStop -->onDestroy        

（Android 7.0）

 onConfigurationChanged    

（Android 8.0）
 

横屏启动：

onCreate -->onStart-->onResume

切换竖屏：

onPause -->onSaveInstanceState -->onStop -->onDestroy -->onCreate-->onStart -->

onRestoreInstanceState--> onResume -->onPause -->onStop -->onDestroy        

（Android 6.0 ）	 
onConfigurationChanged-->onPause -->onSaveInstanceState -->onStop -->onDestroy -->

onCreate-->onStart -->onRestoreInstanceState-->onResume -->onPause -->onStop -->onDestroy        

（Android 7.0）

onConfigurationChanged    

（Android 8.0）
总结：设置了configChanges属性为orientation之后，Android6.0 同没有设置configChanges情况相同，完整的走完了两个生命周期，调用了onSaveInstanceState和onRestoreInstanceState方法；Android 7.0则会先回调onConfigurationChanged方法，剩下的流程跟Android 6.0 保持一致；Android 8.0 系统更是简单，
只是回调了onConfigurationChanged方法，并没有走Activity的生命周期方法。
 
3.AndroidManifest设置了configChanges   
android:configChanges="orientation|keyboardHidden|screenSize" 
竖(横)屏启动：onCreate -->onStart-->onResume
切换横(竖)屏：onConfigurationChanged   （Android 6.0 Android 7.0 Android 8.0）

总结：设置android:configChanges="orientation|keyboardHidden|screenSize"  则都不会调用Activity的其他生命周期方法，只会调用onConfigurationChanged方法。

4.AndroidManifest设置了configChanges   
android:configChanges="orientation|screenSize" 
竖(横)屏启动：onCreate -->onStart-->onResume
切换横(竖)屏：onConfigurationChanged   （Android 6.0 Android 7.0 Android 8.0）

总结：没有了keyboardHidden跟3是相同的，orientation代表横竖屏切换 screenSize代表屏幕大小发生了改变，
设置了这两项就不会回调Activity的生命周期的方法，只会回调onConfigurationChanged 。

5.AndroidManifest设置了configChanges   
android:configChanges="orientation|keyboardHidden" 

总结：跟只设置了orientation属性相同，Android6.0 Android7.0会回调生命周期的方法，Android8.0则只回调onConfigurationChanged。说明如果设置了orientation 和 screenSize 都不会走生命周期的方法，keyboardHidden不影响。
1.不设置configChanges属性不会回调onConfigurationChanged，且切屏的时候会回调生命周期方法。
2.只有设置了orientation 和 screenSize 才会保证都不会走生命周期，且切屏只回调onConfigurationChanged。
3.设置orientation，没有设置screenSize，切屏会回调onConfigurationChanged，但是还会走生命周期方法。

注：这里只选择了Android部分系统的手机做测试，由于不同系统的手机品牌也不相同，可能略微会有区别。
      
另：
代码动态设置横竖屏状态（onConfigurationChanged当屏幕发生变化的时候回调）
setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

获取屏幕状态（int ORIENTATION_PORTRAIT = 1;  竖屏    int ORIENTATION_LANDSCAPE = 2; 横屏）
int screenNum = getResources().getConfiguration().orientation;

configChanges属性
1. orientation 屏幕在纵向和横向间旋转 
2.keyboardHidden 键盘显示或隐藏 
3.screenSize 屏幕大小改变了 
4.fontScale 用户变更了首选的字体大小 
5.locale 用户选择了不同的语言设定 
6.keyboard 键盘类型变更，例如手机从12键盘切换到全键盘 
7.touchscreen或navigation 键盘或导航方式变化，一般不会发生这样的事件
常用的包括：orientation keyboardHidden screenSize，设置这三项界面不会走Activity的生命周期，只会回调onConfigurationChanged方法。

screenOrientation属性
1.unspecified 默认值，由系统判断状态自动切换 
2.landscape 横屏 
3. portrait 竖屏 
4.user 用户当前设置的orientation值 
5. behind 下一个要显示的Activity的orientation值 
6. sensor 使用传感器 传感器的方向 
7. nosensor 不使用传感器 基本等同于unspecified
仅landscape和portrait常用，代表界面默认是横屏或者竖屏，还可以再代码中更改。 
0　引言

从控制台中读取数据是一个比较常用的功能，在 JDK 5.0 以前的版本中的实现是比较复杂的，需要手工处理系统的输入流。有意思的是，从 JDK 5.0 版本开始，能从控制台中输入数据的方法每增加一个版本号，就有一种新增的方法，这也增加了选择的种类，可以依据不同的要求来进行选择。下面来看一下，各个版本中如何从控制台中读取数据以及各自的优缺点。




1　JDK 1.4 及以下版本读取的方法

JDK 1.4 及以下的版本中要想从控制台中输入数据只有一种办法，即使用System.in 获得系统的输入流，再桥接至字符流从字符流中读入数据。示例代码如下：




import <a href="http://lib.csdn.net/base/java" class='replace_word' title="Java 知识库" target='_blank' style='color:#df3434; font-weight:bold;'>Java</a>.io.IOException;
import java.io.InputStreamReader;
public class Test1 {
    public static void main(String[] args) {
        String str = readString("请输入字符串：");
        System.out.println("readString 方法的输入：" + str);
    }
    /**
     * 使用系统的输入流，从控制台中读取数据<br/>
     * 用于所用的JDK版本
     * @param prompt 提示信息
     * @return 输入的字符串
     */
    private static String readString(String prompt) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String str = null;
        try {
            System.out.print(prompt);
            str = br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str;
    }
}
 

从上面的代码段来看，这种控制台输入的方法非常地麻烦，为了能读取整行的数据，采用了BufferedReader 类来进行处理，而且在读取的过程中还需要捕获IOException 。不过这是 JDK 1.4 及以下版本中从控制台读取数据唯一的办法。还有一种非控制台读入数据的办法，就是采用 Swing 中的JOptionPane ，会弹出一个非常漂亮的输入对话框让使用者输入数据，但这是一种比较另类的做法，不推荐使用。




import javax.swing.JOptionPane;
public class Test2 {
    public static void main(String[] args) {
        String str = readStringFromDialog("请输入字符串：");
        System.out.println("readStringFromDialog 方法的输入：" + str);
    }
    /**
     * 使用 JOptionPane的输入对话框，输入字符串<br/>
     * 用于所用的JDK版本
     * @param prompt 提示信息
     * @return 输入的字符串
     */
    private static String readStringFromDialog(String prompt) {
        return JOptionPane.showInputDialog(prompt);
    }
}
 

上面的两种方法都有个共同的缺点――只能读取字符串，若需要读取其他类型的数据需要手工进行转换。




2　JDK 5.0 读取的方法

从 JDK 5.0 开始，基本类库中增加了java.util.Scanner 类，根据它的 API 文档说明，这个类是采用正则表达式进行基本类型和字符串分析的文本扫描器。使用它的Scanner(InputStream source) 构造方法，可以传入系统的输入流System.in 而从控制台中读取数据。示例代码如下：




import java.util.Scanner;
public class Test3 {
    public static void main(String[] args) {
        String str = readString5("请输入字符串：");
        System.out.println("readString5 方法的输入：" + str);
    }
    /**
     * 使用扫描器类（Scanner）从控制台中读取字符串<br/>
     * 适用于JDK 5.0及以后的版本
     * @param prompt 提示信息
     * @return 输入的字符串
     */
    private static String readString5(String prompt) {
        Scanner scanner = new Scanner(System.in);
        System.out.print(prompt);
        return scanner.nextLine();
    }
}
 

从代码量上来看，Test3 比Test1 少了很多的代码，核心代码只有两行。其实并不是Scanner 将控制台输入给简单化了，只是在其内部的实现中已经将IOException 处理了，而且采用InputStreamReader 来一个字符一个字符进行扫描读取的（嘿嘿，它本身就是个扫描器），只是Scanner 做了更高层次的封装。

Scanner 不仅可以从控制台中读取字符串，还可以读取除char 之外的其他七种基本类型和两个大数字类型，并不需要显式地进行手工转换。Scanner 不单单只能扫描控制台中输入的字符，它还可以让读入的字符串匹配一定的正则表达式模式，如果不匹配时将抛出InputMismatchException 异常。

使用System.in 作为它的构造参数时，它只扫描了系统输入流中的字符。它还有其他的构造，分别可以从文件或者是字符串中扫描分析字符串的，具体的使用方法可以参考 API 文档说明。




3　JDK 6.0 读取的方法

从 JDK 6.0 开始，基本类库中增加了java.io.Console 类，用于获得与当前 Java 虚拟机关联的基于字符的控制台设备。在纯字符的控制台界面下，可以更加方便地读取数据。示例代码如下：




import java.io.Console;
import java.util.Scanner;
public class Test4 {
    public static void main(String[] args) {      
        String str = readString6("请输入字符串：");
        System.out.println("readString6 方法的输入：" + str);
    }
    
    /**
     * 使用控制台类（Console）从控制台中读取字符串<br/>
     * 适用于JDK 1.6或以后的版本
     * @param prompt 提示信息
     * @return 输入的字符串
     */
    private static String readString6(String prompt) {
        Console console = System.console();
        if (console == null) {
            throw new IllegalStateException("不能使用控制台");
        }
        return console.readLine(prompt);
    }
}
 

在Test1 和Test3 中，输入数据前的提示信息需要使用System.out.print(); 来输出，但是使用基于Console 的Test4 类，可以在方法参数中直接放入提示信息。

如果需要在控制台中输入密码等敏感信息的话，像在浏览器或者是应用程序中那样显示替代字符，在 JDK 6.0 以前的做法是相当麻烦的（具体的做法可以参考《Java 编程语言中的口令屏蔽》 一文），而使用Console 类的readPassword() 方法可以在控制台上不回显地输入密码，并将密码结果保存在char 数组中，根据 API 文档的建议，在使用后应立即将数组清空，以减少其在内存中占用的时间，以便增强安全性。

但是，Console 也有一些缺点，根据Console API 文档的说明：

虚拟机是否具有控制台取决于底层平台，还取决于调用虚拟机的方式。如果虚拟机从一个交互式命令行开始启动，且没有重定向标准输入和输出流，那么其控制台将存在，并且通常连接到键盘并从虚拟机启动的地方显示。如果虚拟机是自动启动的（例如，由后台作业调度程序启动），那么它通常没有控制台。

通过上面的文档说明可以看出，在使用 IDE 的情况下，是无法获取到Console 实例的，原因在于在 IDE 的环境下，重新定向了标准输入和输出流，也是就是将系统控制台上的输入输出重定向到了 IDE 的控制台中。因此，在 IDE 中不能使用这个程序，而Test1 和Test3 就没有这种限制。




4　总结

以上囊括了 Java 中各种版本从控制台中读入数据的方法，将对它们的优缺点进行了分析。下面给出了一些使用建议，可供参考：
JRE 1.4 或以下版本的情况下，没得选择只能采用Test1 或者是非控制台读入的Test2 的方法。 
JRE 5.0 的情况下，建议使用基于Scanner 的Test3 的方法，更方便地进行数据读取。 
JRE 6.0 的情况，并且只在字符界面的控制台下运行时，采用Test4 的方法，如果需要读入像密码之类的敏感数据，为了安全性考虑也必须使用Test4 或者是自行实现。如果需要读入除字符串类型之外的其他数据类型，建议使用基于Scanner 的控制台输入。 



public class ReadConsole2 {

         public static void main(String[] args) {

                   //数组缓冲

                   byte[] b = new byte[1024];

                   //有效数据个数

                   int n = 0;

                   try{

                            while(true){

                                     //提示信息

                                     System.out.println("请输入：");

                                     //读取数据

                                     n = System.in.read(b);

                                     //转换为字符串

                                     String s = new String(b,0,n - 2);

                                     //判断是否是quit

                                     if(s.equalsIgnoreCase("quit")){

                                               break; //结束循环

                                     }

                                     //回显内容

                                     System.out.println("输入内容为：" + s);

                            }

                   }catch(Exception e){}

         }

}


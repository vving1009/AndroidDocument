@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
        setMeasuredDimension(width, height);
｝

 @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        int r = getMeasuredWidth() / 2;
        Paint paint = new Paint();
        paint.setColor(Color.GREEN);
        //开始绘制
        canvas.drawCircle(centerX, centerY, r, paint);
｝


@Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
        
        setMeasuredDimension(getMaxChildWidth(), heightSize);
        ｝
        
        
@Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        int count = getChildCount();
        //记录当前的高度位置
        int curHeight = t;
        //将子View逐个摆放
        for (int i = 0; i < count; i++) {
            View child = getChildAt(i);
            int height = child.getMeasuredHeight();
            int width = child.getMeasuredWidth();
            //摆放子View，参数分别是子View矩形区域的左、上、右、下边
            child.layout(l, curHeight, l + width, curHeight + height);
            curHeight += height;
        }
    }
    
    
    
    <resources>

    <!--name为声明的"属性集合"名，可以随便取，但是最好是设置为跟我们的View一样的名称-->
    <declare-styleable name="MyView">
        <!--声明我们的属性，名称为default_size,取值类型为尺寸类型（dp,px等）-->
        <attr name="default_size" format="dimension" />
    </declare-styleable>
</resources>

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:hc="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <com.hc.studyview.MyView
        android:layout_width="match_parent"
        android:layout_height="100dp"
        hc:default_size="100dp" />

</LinearLayout>

private int defalutSize;
  public MyView(Context context, AttributeSet attrs) {
      super(context, attrs);
      //第二个参数就是我们在styles.xml文件中的<declare-styleable>标签
        //即属性集合的标签，在R文件中名称为R.styleable+name
        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.MyView);

        //第一个参数为属性集合里面的属性，R文件名称：R.styleable+属性集合名称+下划线+属性名称
        //第二个参数为，如果没有设置这个属性，则设置的默认的值
        defalutSize = a.getDimensionPixelSize(R.styleable.MyView_default_size, 100);

        //最后记得将TypedArray对象回收
        a.recycle();
   }

/////////////////////////////////////////////////////////////////////////////////////////
https://blog.csdn.net/u012760183/article/details/51440242
自定义View的分类

    继承View重写onDraw方式
    这种方式主要用来实现一些不规则的自定义View
    需要自己处理wrap_content的情况 因为默认的View对wrap_content没做特殊处理，只把这种情况当做match_parent处理 而且padding也需要自己处理 margin不用 因为margin是父容器确定的
    继承ViewGroup派生特殊的Layout
    这种方式稍微复杂一些，它需要处理onMeasure和onLayout这两个函数 完成测量和布局的工作 并且需要自行处理wrap_content情况
    继承特定的View(比如TextView等)
    此种方式比较常见，一般用于扩展一种已经存在的View的功能 此方法比较容易实现 不需要自己处理 wrap_content和padding
    继承特定的ViewGroup(比如LinearLayout)
    此种方式比较常见，相比第二种方法简单许多，因为它已经有默认的onMeasure和onLayout的实现 并且已经处理了wrap_content和padding
    通常这种方式和方法二的实现是互通的 ，这个方法可以实现的方法二也可以实现，方法二能实现的这个也能实现，只不过方法二比较麻烦，但是贴近底层，贴近底层效率就会高一点，方法四比较简单

自定义View要注意的问题

    让View支持wrap_content
    直接继承View或ViewGroup的控件 都不支持wrap_content 方法 需要在onMeasure方法中设置
    如果有必要 支持padding
    直接继承View的控件，如果不在onDraw方法中处理padding 那么padding属性是无法起作用的 直接继承ViewGroup的控件，需要处理padding和子元素的margin对其的影响，否则这两个属性也无效
    尽量不要在view中使用handler 因为view提供了post方法
    View内部本身就提供了post系列方法 可以代替handler 但如果明确需要Handler 可以使用
    view中有线程或者动画 要及时停止
    这是为了防止内存泄漏，可以在onDetachedFromWindow方法中结束，这个方法回调的时机是 当View的Activity退出或者当前View被移除的时候 会调用 这时候是结束动画或者线程的好时机 另外还有一个对应的方法 onAttachedToWindow 这个方法调用的时机是在包含View的Activity启动时 回调 回调在onDraw方法 之前
    有嵌套滑动效果时 注意处理滑动冲突
    滑动冲突参考我的文章 
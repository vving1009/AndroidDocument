1. android:process可以针对一个组件（activity，broadcast等）。

<application android:process="com.android.phone">
应用程序的所有组件运行在该进程中。每个组件可以通过设置它自己的process属性来覆盖该设置。
默认情况下，Android为每个应用程序创建一个单独的进程，所有组件运行在该进程中，这个默认进程的名字通常与该应用程序的包名相同。
比如<manifest xmlns:android="http://schemas.android.com/apk/res/android"
        package="com.lt.mytest" >
那么该程序默认的进程名为com.lt.mytest

设置该属性可以使得本应用程序与其它应用程序共享相同的进程，仅仅当这两个应用程序也共享一个拥有相同签名的UserId。
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    android:sharedUserId="android.uid.phone" >
与其它应用程序共享的一个Linux User Id的名字。
默认情况下，Android为每个应用程序分配一个唯一的User Id。然而，如果有多个应用程序都将该属性设置为一个相同的值，那么它们将共享相同的Id。如果这些应用程序再被设置成运行在一个相同的进程，它们便可以彼此访问对方的数据。 

如果想让某个Activity运行在独立的进程中，则需要在Androidmanifest.xml中对Activity的属性Android:process =”value“ 进行配置,value的值就是此Activity所在的进程的进程名。如果进程名以“：”开头，则为私有进程；如果进程名以小写字母开头，则为全局进程。
私有进程:
android:process=":remote"，以冒号开头，冒号后面的字符串原则上是可以随意指定的。如果我们的包名为“com.example.processtest”，则实际的进程名为“com.example.processtest:remote”。这种设置形式表示该进程为当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中。
全局进程:
进程名称不以“:”开头的进程都可以叫全局进程，如android:process="com.example.processtest.remote"，以小写字母开头，表示运行在一个以这个名字命名的全局进程中，其他应用通过设置相同的ShareUID可以和它跑在同一个进程。

进程之间的通信主要靠binder机制。
让某些Activity运行在单独的进程中的好处是可以降低整个应用中不同组件之间的耦合度。 

 sdk上说的是activity和service默认是运行在应用进程的主线程中，四大组件默认都是和activity运行在同一个主线程中的，那就是说activity通过startservice方法启动一个服务后，被启动的服务和activity都是在同一个线程中的。
 
2. android：mutiprocess的的值来完成将组件留下来还是嫁出去的操作，它的默认值false表示组件的对象构造和运行都在本应用进程中，如果为true，就会将该组件嫁出去，当有其他应用进程来调用这个组件时，会在调用的应用中来构造一个组件的对象，而不是在拥有该组件的应用进程中。
android AsyncTask介绍



更多精彩文章，请关注公众号"Devin说"

AsyncTask和Handler对比

1 ） AsyncTask实现的原理,和适用的优缺点

AsyncTask,是android提供的轻量级的异步类,可以直接继承AsyncTask,在类中实现异步操作,并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),最后反馈执行的结果给UI主线程.

使用的优点:

l  简单,快捷

l  过程可控

       

使用的缺点:

l  在使用多个异步操作和并需要进行Ui变更时,就变得复杂起来.

2 ）Handler异步实现的原理和适用的优缺点

在Handler 异步实现时,涉及到 Handler, Looper, Message,Thread四个对象，实现异步的流程是主线程启动Thread（子线程）àthread(子线程)运行并生成Message-àLooper获取Message并传递给HandleràHandler逐个获取Looper中的Message，并进行UI变更。

使用的优点：

l  结构清晰，功能定义明确

l  对于多个后台任务时，简单，清晰

   

使用的缺点：

l  在单个后台异步处理时，显得代码过多，结构过于复杂（相对性）

 

AsyncTask介绍

Android的AsyncTask比Handler更轻量级一些，适用于简单的异步处理。


首先明确Android之所以有Handler和AsyncTask，都是为了不阻塞主线程（UI线程），且UI的更新只能在主线程中完成，因此异步处理是不可避免的。

 

Android为了降低这个开发难度，提供了AsyncTask。AsyncTask就是一个封装过的后台任务类，顾名思义就是异步任务。

AsyncTask直接继承于Object类，位置为android.os.AsyncTask。要使用AsyncTask工作我们要提供三个泛型参数，并重载几个方法(至少重载一个)。

 

AsyncTask定义了三种泛型类型 Params，Progress和Result。

?Params 启动任务执行的输入参数，比如HTTP请求的URL。
?Progress 后台任务执行的百分比。
?Result 后台执行任务最终返回的结果，比如String。

使用过AsyncTask 的同学都知道一个异步加载数据最少要重写以下这两个方法：
?doInBackground(Params…) 后台执行，比较耗时的操作都可以放在这里。注意这里不能直接操作UI。此方法在后台线程执行，完成任务的主要工作，通常需要较长的时间。在执行过程中可以调用publicProgress(Progress…)来更新任务的进度。
?onPostExecute(Result)  相当于Handler 处理UI的方式，在这里面可以使用在doInBackground 得到的结果处理操作UI。 此方法在主线程执行，任务执行的结果作为此方法的参数返回

有必要的话你还得重写以下这三个方法，但不是必须的：
?onProgressUpdate(Progress…)   可以使用进度条增加用户体验度。 此方法在主线程执行，用于显示任务执行的进度。
?onPreExecute()        这里是最终用户调用Excute时的接口，当任务执行之前开始调用此方法，可以在这里显示进度对话框。
?onCancelled()             用户调用取消时，要做的操作

使用AsyncTask类，以下是几条必须遵守的准则：
?Task的实例必须在UI thread中创建；
?execute方法必须在UI thread中调用；
?不要手动的调用onPreExecute(), onPostExecute(Result)，doInBackground(Params...), onProgressUpdate(Progress...)这几个方法；
?该task只能被执行一次，否则多次调用时将会出现异常；

一个超简单的理解 AsyncTask 的例子：
main.xml
<?xml version="1.0" encoding="utf-8"?>  
2.<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  
3.    android:orientation="vertical"  
4.    android:layout_width="fill_parent"  
5.    android:layout_height="fill_parent"  
6.    >  
7.    <TextView    
8.    android:id="@+id/textView01"  
9.    android:layout_width="fill_parent"   
10.    android:layout_height="wrap_content"   
11.    />  
12.   <ProgressBar   
13.   android:id="@+id/progressBar02"  
14.    android:layout_width="fill_parent"   
15.    android:layout_height="wrap_content"   
16.    style="?android:attr/progressBarStyleHorizontal"   
17.    />  
18.    <Button  
19.    android:id="@+id/button03"  
20.    android:layout_width="fill_parent"   
21.    android:layout_height="wrap_content"   
22.    android:text="更新progressbar"  
23.    />  
24.</LinearLayout>  
MainActivity.java





1.package vic.wong.main;  
2.  
3.import android.app.Activity;  
4.import android.os.Bundle;  
5.import android.view.View;  
6.import android.view.View.OnClickListener;  
7.import android.widget.Button;  
8.import android.widget.ProgressBar;  
9.import android.widget.TextView;  
10.  
11.public class MainActivity extends Activity {  
12.    private Button button;  
13.    private ProgressBar progressBar;  
14.    private TextView textView;  
15.      
16.    @Override  
17.    public void onCreate(Bundle savedInstanceState) {  
18.        super.onCreate(savedInstanceState);  
19.        setContentView(R.layout.main);  
20.          
21.        button = (Button)findViewById(R.id.button03);  
22.        progressBar = (ProgressBar)findViewById(R.id.progressBar02);  
23.        textView = (TextView)findViewById(R.id.textView01);  
24.          
25.        button.setOnClickListener(new OnClickListener() {  
26.              
27.            @Override  
28.            public void onClick(View v) {  
29.                ProgressBarAsyncTask asyncTask = new ProgressBarAsyncTask(textView, progressBar);  
30.                asyncTask.execute(1000);  
31.            }  
32.        });  
33.    }  
34.}  

 


NetOperator.java





1.package vic.wong.main;  
2.  
3.  
4.//模拟网络环境  
5.public class NetOperator {  
6.      
7.    public void operator(){  
8.        try {  
9.            //休眠1秒  
10.            Thread.sleep(1000);  
11.        } catch (InterruptedException e) {  
12.            // TODO Auto-generated catch block  
13.            e.printStackTrace();  
14.        }  
15.    }  
16.  
17.}  

 


ProgressBarAsyncTask .java 





1.package vic.wong.main;  
2.import android.os.AsyncTask;  
3.import android.widget.ProgressBar;  
4.import android.widget.TextView;  
5.  
6./**  
7. * 生成该类的对象，并调用execute方法之后  
8. * 首先执行的是onProExecute方法  
9. * 其次执行doInBackgroup方法  
10. *  
11. */  
12.public class ProgressBarAsyncTask extends AsyncTask<Integer, Integer, String> {  
13.  
14.    private TextView textView;  
15.    private ProgressBar progressBar;  
16.      
17.      
18.    public ProgressBarAsyncTask(TextView textView, ProgressBar progressBar) {  
19.        super();  
20.        this.textView = textView;  
21.        this.progressBar = progressBar;  
22.    }  
23.  
24.  
25.    /**  
26.     * 这里的Integer参数对应AsyncTask中的第一个参数   
27.     * 这里的String返回值对应AsyncTask的第三个参数  
28.     * 该方法并不运行在UI线程当中，主要用于异步操作，所有在该方法中不能对UI当中的空间进行设置和修改  
29.     * 但是可以调用publishProgress方法触发onProgressUpdate对UI进行操作  
30.     */  
31.    @Override  
32.    protected String doInBackground(Integer... params) {  
33.        NetOperator netOperator = new NetOperator();  
34.        int i = 0;  
35.        for (i = 10; i <= 100; i+=10) {  
36.            netOperator.operator();  
37.            publishProgress(i);  
38.        }  
39.        return i + params[0].intValue() + "";  
40.    }  
41.  
42.  
43.    /**  
44.     * 这里的String参数对应AsyncTask中的第三个参数（也就是接收doInBackground的返回值）  
45.     * 在doInBackground方法执行结束之后在运行，并且运行在UI线程当中 可以对UI空间进行设置  
46.     */  
47.    @Override  
48.    protected void onPostExecute(String result) {  
49.        textView.setText("异步操作执行结束" + result);  
50.    }  
51.  
52.  
53.    //该方法运行在UI线程当中,并且运行在UI线程当中 可以对UI空间进行设置  
54.    @Override  
55.    protected void onPreExecute() {  
56.        textView.setText("开始执行异步线程");  
57.    }  
58.  
59.  
60.    /**  
61.     * 这里的Intege参数对应AsyncTask中的第二个参数  
62.     * 在doInBackground方法当中，，每次调用publishProgress方法都会触发onProgressUpdate执行  
63.     * onProgressUpdate是在UI线程中执行，所有可以对UI空间进行操作  
64.     */  
65.    @Override  
66.    protected void onProgressUpdate(Integer... values) {  
67.        int vlaue = values[0];  
68.        progressBar.setProgress(vlaue);  
69.    }  
70.  
71.      
72.      
73.      
74.  
75.}  
